Questão 16:

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

int * ordenar(int *vet, int n)  // implementação da função de ordenação bubble sort
{
    int aux, i, j;
    for(j=n-1; j>=1; j--)
    {
        for(i=0; i<j; i++)
        {
            if(vet[i]>vet[i+1])
            {
                aux=vet[i];
                vet[i]=vet[i+1];
                vet[i+1]=aux;
            }
        }
    }
    return vet;
}

int compare(const void * a, const void * b)// Função de comparação do qsort
{
    return ( (int)a - (int)b );
}
int main()
{
    int *arr1,*arr2,*arr3;
    clock_t cmc_t, fim_t;
    int n = 100000; // foi utilizado um n grande para podermos ter um tempo maior


    arr1 = (int *)malloc(n * sizeof(int)), // aloca o array 1 com n elementos
    arr2 = (int *)malloc(n * sizeof(int)), // aloca o array 2 com n elementos
    arr3 = (int *)malloc(n * sizeof(int)); // aloca o array 3 com n elementos

    // Função usada para preencher um array com numeros aleatórios
    srand(time(NULL));
    for(int i = 0; i < n; i++)
    {
        *(arr1 + i) = rand() % 100;
    }
    // Copia o array random para os outros arrays
    memcpy(arr2, arr1, n * sizeof(int));
    memcpy(arr3, arr1, n * sizeof(int));
    cmc_t = clock();
    ordenar(arr1, n-1);
    fim_t = clock();
    printf("tempo BubbleSort: %fseg\n", (double)(fim_t - cmc_t / CLOCKS_PER_SEC));
    free(arr2); // libera o espaço de memoria alocado para o array 2
    free(arr1);// libera o espaço de memoria alocado para o array 1

    //repete o procedimento para os outros arrays
    cmc_t = clock();
    qsort(arr2, n, sizeof(int), compare);
    fim_t = clock();
    printf("Tempo Qsort: %fseg\n", (double)(fim_t - cmc_t) / CLOCKS_PER_SEC);
    free(arr2); // libera o espaço de memoria alocado para o array 2
    
    void (*ponteiro_qsort)(void *arr, size_t n, size_t size, int(*compar)(const void *, const void *));
    ponteiro_qsort = qsort;
    cmc_t = clock();
    ponteiro_qsort(arr3, n, sizeof(int), compare);
    fim_t = clock();
    printf("tempo Qsort por ponteiro: %fseg\n", (double)(fim_t - cmc_t) / CLOCKS_PER_SEC);
    free(arr3);
        
    return 0;
}